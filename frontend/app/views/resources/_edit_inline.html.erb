<%= form_for @resource, :as => "resource", :url => {:action => :update, :id => @resource.id}, :html => {:class => 'form-horizontal aspace-record-form', :id => "resource_form"}.merge(update_monitor_params(@resource)) do |f| %>
  <%= form_context :resource, @resource do |form| %>
    <div class="row-fluid">
      <div class="span3">
        <%= render_aspace_partial :partial => "resources/sidebar" %>
      </div>
      <div class="span9">
        <%= render_aspace_partial :partial => "toolbar" %>
        <div class="record-pane">
           <%= render_aspace_partial :partial => "resources/form_container", :locals => {:form => form} %>
           <div class="form-actions">
             <button type="submit" class="btn btn-primary"><%= I18n.t("resource._frontend.action.save") %></button>
              <%= link_to I18n.t("actions.cancel"), :back, :class => "btn btn-cancel" %>
           </div>
         </div>
      </div>
    </div>

    <% if @refresh_tree_node
         node_data = {
           'id' => @resource.id,
           'uri' => @resource.uri,
           'title' => @resource.title,
           'level' => @resource.level==='otherlevel' ? @resource.other_level : I18n.t("enumerations.archival_record_level.#{@resource.level}", :default => @resource.level),
           'jsonmodel_type' => @resource.jsonmodel_type,
           'node_type' => @resource.jsonmodel_type,
           'instance_types' => @resource.instances.map{|instance| I18n.t("enumerations.instance_instance_type.#{instance['instance_type']}", :default => instance['instance_type'])},
           'containers' => @resource.to_hash["instances"].map{|instance| instance["container"]}.compact.map {|container|
             container["type_1"] = I18n.t("enumerations.container_type.#{container["type_1"]}", :default => container["type_1"]) if container["type_1"]
             container["type_2"] = I18n.t("enumerations.container_type.#{container["type_2"]}", :default => container["type_2"]) if container["type_2"]
             container["type_3"] = I18n.t("enumerations.container_type.#{container["type_3"]}", :default => container["type_3"]) if container["type_3"]
             container
           },
           'replace_new_node' => false
         }
    %>
      <script>
        AS.refreshTreeNode(<%= node_data.to_json.html_safe %>);
      </script>
    <% end %>
  <% end %>
<% end %>
